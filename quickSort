#include <iostream>
#define SWAP(x, y, temp) ((temp) = (x), (x) = (y), (y) = (temp))
using namespace std;
int patition(int list[], int left, int right)
{
    int temp;
    int pivot = list[left];
    int low = left;
    int high = right + 1;

    do
    {
        do // pivot값보다 큰 값의 인덱스 왼쪽부터 찾기
        {
            low++;
        } while (low <= right && list[low] < pivot);

        do // pivot값보다 작은 값의 인덱스 오른쪽부터 찾기
        {
            high--;
        } while (high >= left && list[high] > pivot);

        if (low < high)
        {
            SWAP(list[low], list[high], temp);
        }
    } while (low < high);
    SWAP(list[left], list[high], temp); // pivot 위치 수정
    return high;
}

void quicksort(int list[], int left, int right)
{
    if (left < right)
    {
        int p = patition(list, left, right);

        quicksort(list, left, p - 1);
        quicksort(list, p + 1, right);
    }
}

int main()
{
    int N;
    cin >> N;
    int list[N];
    for (int i = 0; i < N; i++)
    {
        cin >> list[i];
    }
    quicksort(list, 0, N - 1);
    for (int i = 0; i < N; i++)
    {
        cout << list[i] << '\n';
    }
    return 0;
}